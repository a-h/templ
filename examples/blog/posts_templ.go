// Code generated by templ@(devel) DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "fmt"
import "time"

func headerTemplate(name string) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar1 := templ.GetChildren(templCtx)
		if templVar1 == nil {
			templVar1 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<header data-testid=\"headerTemplate\"><h1>")
		if templErr != nil {
			return templErr
		}
		var templVar2 string = name
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar2))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</h1></header>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func footerTemplate() templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar3 := templ.GetChildren(templCtx)
		if templVar3 == nil {
			templVar3 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<footer data-testid=\"footerTemplate\"><div>")
		if templErr != nil {
			return templErr
		}
		templVar4 := `&copy; `
		_, templErr = templBuffer.WriteString(templVar4)
		if templErr != nil {
			return templErr
		}
		var templVar5 string = fmt.Sprintf("%d", time.Now().Year())
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar5))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</div></footer>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func navTemplate() templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar6 := templ.GetChildren(templCtx)
		if templVar6 == nil {
			templVar6 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<nav data-testid=\"navTemplate\"><ul><li><a href=\"/\">")
		if templErr != nil {
			return templErr
		}
		templVar7 := `Home`
		_, templErr = templBuffer.WriteString(templVar7)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</a></li><li><a href=\"/posts\">")
		if templErr != nil {
			return templErr
		}
		templVar8 := `Posts`
		_, templErr = templBuffer.WriteString(templVar8)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</a></li></ul></nav>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func layout(name string) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar9 := templ.GetChildren(templCtx)
		if templVar9 == nil {
			templVar9 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<html><head><title>")
		if templErr != nil {
			return templErr
		}
		var templVar10 string = name
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar10))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</title></head><body>")
		if templErr != nil {
			return templErr
		}
		templErr = headerTemplate(name).Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		templErr = navTemplate().Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("<main>")
		if templErr != nil {
			return templErr
		}
		templErr = templVar9.Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</main></body>")
		if templErr != nil {
			return templErr
		}
		templErr = footerTemplate().Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</html>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func postsTemplate(posts []Post) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar11 := templ.GetChildren(templCtx)
		if templVar11 == nil {
			templVar11 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<div data-testid=\"postsTemplate\">")
		if templErr != nil {
			return templErr
		}
		for _, p := range posts {
			_, templErr = templBuffer.WriteString("<div data-testid=\"postsTemplatePost\"><div data-testid=\"postsTemplatePostName\">")
			if templErr != nil {
				return templErr
			}
			var templVar12 string = p.Name
			_, templErr = templBuffer.WriteString(templ.EscapeString(templVar12))
			if templErr != nil {
				return templErr
			}
			_, templErr = templBuffer.WriteString("</div><div data-testid=\"postsTemplatePostAuthor\">")
			if templErr != nil {
				return templErr
			}
			var templVar13 string = p.Author
			_, templErr = templBuffer.WriteString(templ.EscapeString(templVar13))
			if templErr != nil {
				return templErr
			}
			_, templErr = templBuffer.WriteString("</div></div>")
			if templErr != nil {
				return templErr
			}
		}
		_, templErr = templBuffer.WriteString("</div>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func home() templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar14 := templ.GetChildren(templCtx)
		if templVar14 == nil {
			templVar14 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		templVar15 := templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
			templBuffer, templIsBuffer := templW.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			_, templErr = templBuffer.WriteString("<div data-testid=\"homeTemplate\">")
			if templErr != nil {
				return templErr
			}
			templVar16 := `Welcome to my website.`
			_, templErr = templBuffer.WriteString(templVar16)
			if templErr != nil {
				return templErr
			}
			_, templErr = templBuffer.WriteString("</div>")
			if templErr != nil {
				return templErr
			}
			if !templIsBuffer {
				_, templErr = io.Copy(templW, templBuffer)
			}
			return templErr
		})
		templErr = layout("Home").Render(templ.WithChildren(templCtx, templVar15), templBuffer)
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func posts(posts []Post) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar17 := templ.GetChildren(templCtx)
		if templVar17 == nil {
			templVar17 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		templVar18 := templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
			templBuffer, templIsBuffer := templW.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			templErr = postsTemplate(posts).Render(templCtx, templBuffer)
			if templErr != nil {
				return templErr
			}
			if !templIsBuffer {
				_, templErr = io.Copy(templW, templBuffer)
			}
			return templErr
		})
		templErr = layout("Posts").Render(templ.WithChildren(templCtx, templVar18), templBuffer)
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

// Code generated by templ@(devel) DO NOT EDIT.

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"
import "strings"

import "strconv"

func border() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`border:1px solid #eeeeee;`)
	templCSSBuilder.WriteString(`border-radius:4px;`)
	templCSSBuilder.WriteString(`margin:10px;`)
	templCSSBuilder.WriteString(`padding-top:30px;`)
	templCSSBuilder.WriteString(`padding-bottom:30px;`)
	templCSSID := templ.CSSID(`border`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID:    templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func counts(global, session int) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar1 := templ.GetChildren(templCtx)
		if templVar1 == nil {
			templVar1 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<form id=\"countsForm\" action=\"/\" method=\"POST\" hx-post=\"/\" hx-select=\"#countsForm\" hx-swap=\"outerHTML\"><div class=\"columns\">")
		if templErr != nil {
			return templErr
		}
		var templVar2 = []any{"column", "has-text-centered", "is-primary", border}
		templErr = templ.RenderCSSItems(templCtx, templBuffer, templVar2...)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("<div class=\"")
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(templVar2).String()))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("\"><h1 class=\"title is-size-1 has-text-centered\">")
		if templErr != nil {
			return templErr
		}
		var templVar3 string = strconv.Itoa(global)
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar3))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</h1><p class=\"subtitle has-text-centered\">")
		if templErr != nil {
			return templErr
		}
		templVar4 := `Global`
		_, templErr = templBuffer.WriteString(templVar4)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</p><div><button class=\"button is-primary\" type=\"submit\" name=\"global\" value=\"global\">")
		if templErr != nil {
			return templErr
		}
		templVar5 := `+1`
		_, templErr = templBuffer.WriteString(templVar5)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</button></div></div>")
		if templErr != nil {
			return templErr
		}
		var templVar6 = []any{"column", "has-text-centered", border}
		templErr = templ.RenderCSSItems(templCtx, templBuffer, templVar6...)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("<div class=\"")
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(templVar6).String()))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("\"><h1 class=\"title is-size-1 has-text-centered\">")
		if templErr != nil {
			return templErr
		}
		var templVar7 string = strconv.Itoa(session)
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar7))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</h1><p class=\"subtitle has-text-centered\">")
		if templErr != nil {
			return templErr
		}
		templVar8 := `Session`
		_, templErr = templBuffer.WriteString(templVar8)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</p><div><button class=\"button is-secondary\" type=\"submit\" name=\"session\" value=\"session\">")
		if templErr != nil {
			return templErr
		}
		templVar9 := `+1`
		_, templErr = templBuffer.WriteString(templVar9)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</button></div></div></div></form>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func Page(global, session int) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar10 := templ.GetChildren(templCtx)
		if templVar10 == nil {
			templVar10 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<html><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templErr != nil {
			return templErr
		}
		templVar11 := `Counts`
		_, templErr = templBuffer.WriteString(templVar11)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</title><link rel=\"stylesheet\" href=\"/assets/css/bulma.min.css\"><link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/assets/favicon/apple-touch-icon.png\"><link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/assets/favicon/favicon-32x32.png\"><link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/assets/favicon/favicon-16x16.png\"><link rel=\"manifest\" href=\"/assets/favicon/site.webmanifest\"><script src=\"/assets/js/htmx.min.js\">")
		if templErr != nil {
			return templErr
		}
		templVar12 := ``
		_, templErr = templBuffer.WriteString(templVar12)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</script></head><body class=\"bg-gray-100\"><header class=\"hero is-primary\"><div class=\"hero-body\"><div class=\"container\"><h1 class=\"title\">")
		if templErr != nil {
			return templErr
		}
		templVar13 := `Counts`
		_, templErr = templBuffer.WriteString(templVar13)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</h1></div></div></header><section class=\"section\"><div class=\"container\"><div class=\"columns is-centered\"><div class=\"column is-half\">")
		if templErr != nil {
			return templErr
		}
		templErr = counts(global, session).Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</div></div></div></section></body></html>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

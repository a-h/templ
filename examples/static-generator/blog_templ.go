// Code generated by templ@(devel) DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "path"
import "github.com/gosimple/slug"

func headerComponent(title string) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar1 := templ.GetChildren(templCtx)
		if templVar1 == nil {
			templVar1 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<head><title>")
		if templErr != nil {
			return templErr
		}
		var templVar2 string = title
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar2))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</title></head>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func contentComponent(title string, body templ.Component) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar3 := templ.GetChildren(templCtx)
		if templVar3 == nil {
			templVar3 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<body><h1>")
		if templErr != nil {
			return templErr
		}
		var templVar4 string = title
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar4))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</h1><div class=\"content\">")
		if templErr != nil {
			return templErr
		}
		templErr = body.Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</div></body>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func contentPage(title string, body templ.Component) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar5 := templ.GetChildren(templCtx)
		if templVar5 == nil {
			templVar5 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<html>")
		if templErr != nil {
			return templErr
		}
		templErr = headerComponent(title).Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		templErr = contentComponent(title, body).Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</html>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func indexPage(posts []Post) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar6 := templ.GetChildren(templCtx)
		if templVar6 == nil {
			templVar6 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<html>")
		if templErr != nil {
			return templErr
		}
		templErr = headerComponent("My Blog").Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("<body><h1>")
		if templErr != nil {
			return templErr
		}
		templVar7 := `My Blog`
		_, templErr = templBuffer.WriteString(templVar7)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</h1>")
		if templErr != nil {
			return templErr
		}
		for _, post := range posts {
			_, templErr = templBuffer.WriteString("<div><a href=\"")
			if templErr != nil {
				return templErr
			}
			var templVar8 templ.SafeURL = templ.SafeURL(path.Join(post.Date.Format("2006/01/02"), slug.Make(post.Title), "/"))
			_, templErr = templBuffer.WriteString(templ.EscapeString(string(templVar8)))
			if templErr != nil {
				return templErr
			}
			_, templErr = templBuffer.WriteString("\">")
			if templErr != nil {
				return templErr
			}
			var templVar9 string = post.Title
			_, templErr = templBuffer.WriteString(templ.EscapeString(templVar9))
			if templErr != nil {
				return templErr
			}
			_, templErr = templBuffer.WriteString("</a></div>")
			if templErr != nil {
				return templErr
			}
		}
		_, templErr = templBuffer.WriteString("</body></html>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

// Code generated by templ@(devel) DO NOT EDIT.

package generatecmd

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"
import "strings"

func row() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`display:flex;`)
	templCSSID := templ.CSSID(`row`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID: templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func column() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`flex:50%;`)
	templCSSID := templ.CSSID(`column`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID: templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func code() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`font-family:monospace;`)
	templCSSID := templ.CSSID(`code`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID: templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func visualisation(templFileName string, left, right templ.Component) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// Element (standard)
		_, err = templBuffer.WriteString("<html>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<head>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<title>")
		if err != nil {
			return err
		}
		// StringExpression
		_, err = templBuffer.WriteString(templ.EscapeString(templFileName))
		if err != nil {
			return err
		}
		// Whitespace (normalised)
		_, err = templBuffer.WriteString(` `)
		if err != nil {
			return err
		}
		// Text
		var_2 := `- Source Map Visualisation`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</title>")
		if err != nil {
			return err
		}
// RawElement
		_, err = templBuffer.WriteString("<style")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" type=\"text/css\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
// Text
var_3 := `
				.mapped { background-color: green }
				.highlighted { background-color: yellow }
			`
_, err = templBuffer.WriteString(var_3)
if err != nil {
	return err
}
		_, err = templBuffer.WriteString("</style>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</head>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<body>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<h1>")
		if err != nil {
			return err
		}
		// StringExpression
		_, err = templBuffer.WriteString(templ.EscapeString(templFileName))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1>")
		if err != nil {
			return err
		}
		// Element (standard)
		// Element CSS
		var var_4 templ.CSSClasses = templ.Classes(row())
		err = templ.RenderCSSItems(ctx, templBuffer, var_4...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(var_4.String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		// Element CSS
		var var_5 templ.CSSClasses = templ.Classes(column(), code())
		err = templ.RenderCSSItems(ctx, templBuffer, var_5...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(var_5.String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// CallTemplate
		err = left.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		// Element (standard)
		// Element CSS
		var var_6 templ.CSSClasses = templ.Classes(column(), code())
		err = templ.RenderCSSItems(ctx, templBuffer, var_6...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(var_6.String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// CallTemplate
		err = right.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</body>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func highlight(sourceId, targetId string) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_highlight_ae80`,
		Function: `function __templ_highlight_ae80(sourceId, targetId){let items = document.getElementsByClassName(sourceId);
	for(let i = 0; i < items.length; i ++) {
		items[i].classList.add("highlighted");
	}
        items = document.getElementsByClassName(targetId);
	for(let i = 0; i < items.length; i ++) {
		items[i].classList.add("highlighted");
	}}`,
		Call: templ.SafeScript(`__templ_highlight_ae80`, sourceId, targetId),
	}
}

func removeHighlight(sourceId, targetId string) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_removeHighlight_58f2`,
		Function: `function __templ_removeHighlight_58f2(sourceId, targetId){let items = document.getElementsByClassName(sourceId);
	for(let i = 0; i < items.length; i ++) {
		items[i].classList.remove("highlighted");
	}
        items = document.getElementsByClassName(targetId);
	for(let i = 0; i < items.length; i ++) {
		items[i].classList.remove("highlighted");
	}}`,
		Call: templ.SafeScript(`__templ_removeHighlight_58f2`, sourceId, targetId),
	}
}

func mappedCharacter(s string, sourceID, targetID string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_7 := templ.GetChildren(ctx)
		if var_7 == nil {
			var_7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// Element (standard)
		// Element CSS
		var var_8 templ.CSSClasses = templ.Classes(templ.Class("mapped"), templ.Class(sourceID), templ.Class(targetID))
		err = templ.RenderCSSItems(ctx, templBuffer, var_8...)
		if err != nil {
			return err
		}
		// Element Script
		err = templ.RenderScriptItems(ctx, templBuffer, highlight(sourceID, targetID), removeHighlight(sourceID, targetID))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<span")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(var_8.String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" onMouseOver=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		var var_9 templ.ComponentScript = highlight(sourceID, targetID)
		_, err = templBuffer.WriteString(var_9.Call)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" onMouseOut=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		var var_10 templ.ComponentScript = removeHighlight(sourceID, targetID)
		_, err = templBuffer.WriteString(var_10.Call)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// StringExpression
		_, err = templBuffer.WriteString(templ.EscapeString(s))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}


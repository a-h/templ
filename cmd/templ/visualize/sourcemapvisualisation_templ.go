// Code generated by templ@(devel) DO NOT EDIT.

package visualize

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"
import "strings"

func row() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`display:flex;`)
	templCSSID := templ.CSSID(`row`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID:    templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func column() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`flex:50%;`)
	templCSSBuilder.WriteString(`overflow-y:scroll;`)
	templCSSBuilder.WriteString(`max-height:100vh;`)
	templCSSID := templ.CSSID(`column`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID:    templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func code() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`font-family:monospace;`)
	templCSSID := templ.CSSID(`code`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID:    templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func combine(templFileName string, left, right templ.Component) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar1 := templ.GetChildren(templCtx)
		if templVar1 == nil {
			templVar1 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<html><head><title>")
		if templErr != nil {
			return templErr
		}
		var templVar2 string = templFileName
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar2))
		if templErr != nil {
			return templErr
		}
		templVar3 := `- Source Map Visualisation`
		_, templErr = templBuffer.WriteString(templVar3)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</title><style type=\"text/css\">")
		if templErr != nil {
			return templErr
		}
		templVar4 := `
				.mapped { background-color: green }
				.highlighted { background-color: yellow }
			`
		_, templErr = templBuffer.WriteString(templVar4)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</style></head><body><h1>")
		if templErr != nil {
			return templErr
		}
		var templVar5 string = templFileName
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar5))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</h1>")
		if templErr != nil {
			return templErr
		}
		var templVar6 = []any{templ.Classes(row())}
		templErr = templ.RenderCSSItems(templCtx, templBuffer, templVar6...)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("<div class=\"")
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(templVar6).String()))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("\">")
		if templErr != nil {
			return templErr
		}
		var templVar7 = []any{templ.Classes(column(), code())}
		templErr = templ.RenderCSSItems(templCtx, templBuffer, templVar7...)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("<div class=\"")
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(templVar7).String()))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("\">")
		if templErr != nil {
			return templErr
		}
		templErr = left.Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</div>")
		if templErr != nil {
			return templErr
		}
		var templVar8 = []any{templ.Classes(column(), code())}
		templErr = templ.RenderCSSItems(templCtx, templBuffer, templVar8...)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("<div class=\"")
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(templVar8).String()))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("\">")
		if templErr != nil {
			return templErr
		}
		templErr = right.Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</div></div></body></html>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func highlight(sourceId, targetId string) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_highlight_ae80`,
		Function: `function __templ_highlight_ae80(sourceId, targetId){let items = document.getElementsByClassName(sourceId);
	for(let i = 0; i < items.length; i ++) {
		items[i].classList.add("highlighted");
	}
        items = document.getElementsByClassName(targetId);
	for(let i = 0; i < items.length; i ++) {
		items[i].classList.add("highlighted");
	}}`,
		Call: templ.SafeScript(`__templ_highlight_ae80`, sourceId, targetId),
	}
}

func removeHighlight(sourceId, targetId string) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_removeHighlight_58f2`,
		Function: `function __templ_removeHighlight_58f2(sourceId, targetId){let items = document.getElementsByClassName(sourceId);
	for(let i = 0; i < items.length; i ++) {
		items[i].classList.remove("highlighted");
	}
        items = document.getElementsByClassName(targetId);
	for(let i = 0; i < items.length; i ++) {
		items[i].classList.remove("highlighted");
	}}`,
		Call: templ.SafeScript(`__templ_removeHighlight_58f2`, sourceId, targetId),
	}
}

func mappedCharacter(s string, sourceID, targetID string) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar9 := templ.GetChildren(templCtx)
		if templVar9 == nil {
			templVar9 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		var templVar10 = []any{templ.Classes(templ.Class("mapped"), templ.Class(sourceID), templ.Class(targetID))}
		templErr = templ.RenderCSSItems(templCtx, templBuffer, templVar10...)
		if templErr != nil {
			return templErr
		}
		templErr = templ.RenderScriptItems(templCtx, templBuffer, highlight(sourceID, targetID), removeHighlight(sourceID, targetID))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("<span class=\"")
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(templVar10).String()))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("\" onMouseOver=\"")
		if templErr != nil {
			return templErr
		}
		var templVar11 templ.ComponentScript = highlight(sourceID, targetID)
		_, templErr = templBuffer.WriteString(templVar11.Call)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("\" onMouseOut=\"")
		if templErr != nil {
			return templErr
		}
		var templVar12 templ.ComponentScript = removeHighlight(sourceID, targetID)
		_, templErr = templBuffer.WriteString(templVar12.Call)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("\">")
		if templErr != nil {
			return templErr
		}
		var templVar13 string = s
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar13))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</span>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

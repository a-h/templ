// Code generated by templ@(devel) DO NOT EDIT.

package testscriptusage

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func withParameters(a string, b string, c int) templ.ComponentScript {
	return templ.ComponentScript{
		Name:     `__templ_withParameters_1056`,
		Function: `function __templ_withParameters_1056(a, b, c){console.log(a, b, c);}`,
		Call:     templ.SafeScript(`__templ_withParameters_1056`, a, b, c),
	}
}

func withoutParameters() templ.ComponentScript {
	return templ.ComponentScript{
		Name:     `__templ_withoutParameters_6bbf`,
		Function: `function __templ_withoutParameters_6bbf(){alert("hello");}`,
		Call:     templ.SafeScript(`__templ_withoutParameters_6bbf`),
	}
}

func onClick() templ.ComponentScript {
	return templ.ComponentScript{
		Name:     `__templ_onClick_657d`,
		Function: `function __templ_onClick_657d(){alert("clicked");}`,
		Call:     templ.SafeScript(`__templ_onClick_657d`),
	}
}

func Button(text string) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar1 := templ.GetChildren(templCtx)
		if templVar1 == nil {
			templVar1 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		templErr = templ.RenderScriptItems(templCtx, templBuffer, withParameters("test", text, 123), withoutParameters())
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("<button onClick=\"")
		if templErr != nil {
			return templErr
		}
		var templVar2 templ.ComponentScript = withParameters("test", text, 123)
		_, templErr = templBuffer.WriteString(templVar2.Call)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("\" onMouseover=\"")
		if templErr != nil {
			return templErr
		}
		var templVar3 templ.ComponentScript = withoutParameters()
		_, templErr = templBuffer.WriteString(templVar3.Call)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("\" type=\"button\">")
		if templErr != nil {
			return templErr
		}
		var templVar4 string = text
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar4))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</button>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func ThreeButtons() templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar5 := templ.GetChildren(templCtx)
		if templVar5 == nil {
			templVar5 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		templErr = Button("A").Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		templErr = Button("B").Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("<button onMouseover=\"console.log(&#39;mouseover&#39;)\" type=\"button\">")
		if templErr != nil {
			return templErr
		}
		templVar6 := `Button C`
		_, templErr = templBuffer.WriteString(templVar6)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</button><button hx-on::click=\"alert(&#39;clicked inline&#39;)\" type=\"button\">")
		if templErr != nil {
			return templErr
		}
		templVar7 := `Button D`
		_, templErr = templBuffer.WriteString(templVar7)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</button>")
		if templErr != nil {
			return templErr
		}
		templErr = templ.RenderScriptItems(templCtx, templBuffer, onClick())
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("<button hx-on::click=\"")
		if templErr != nil {
			return templErr
		}
		var templVar8 templ.ComponentScript = onClick()
		_, templErr = templBuffer.WriteString(templVar8.Call)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("\" type=\"button\">")
		if templErr != nil {
			return templErr
		}
		templVar9 := `Button E`
		_, templErr = templBuffer.WriteString(templVar9)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</button>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

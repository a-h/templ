// Code generated by templ@(devel) DO NOT EDIT.

package testahref

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func render() templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar1 := templ.GetChildren(templCtx)
		if templVar1 == nil {
			templVar1 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<a href=\"javascript:alert(&#39;unaffected&#39;);\">")
		if templErr != nil {
			return templErr
		}
		templVar2 := `Ignored`
		_, templErr = templBuffer.WriteString(templVar2)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</a><a href=\"")
		if templErr != nil {
			return templErr
		}
		var templVar3 templ.SafeURL = templ.URL("javascript:alert('should be sanitized')")
		_, templErr = templBuffer.WriteString(templ.EscapeString(string(templVar3)))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("\">")
		if templErr != nil {
			return templErr
		}
		templVar4 := `Sanitized`
		_, templErr = templBuffer.WriteString(templVar4)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</a><a href=\"")
		if templErr != nil {
			return templErr
		}
		var templVar5 templ.SafeURL = templ.SafeURL("javascript:alert('should not be sanitized')")
		_, templErr = templBuffer.WriteString(templ.EscapeString(string(templVar5)))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("\">")
		if templErr != nil {
			return templErr
		}
		templVar6 := `Unsanitized`
		_, templErr = templBuffer.WriteString(templVar6)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</a>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

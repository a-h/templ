// Code generated by templ@(devel) DO NOT EDIT.

package testrawelements

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Example() templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar1 := templ.GetChildren(templCtx)
		if templVar1 == nil {
			templVar1 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<html><head></head><body><style>")
		if templErr != nil {
			return templErr
		}
		templVar2 := `<!-- Some stuff -->`
		_, templErr = templBuffer.WriteString(templVar2)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</style><style>")
		if templErr != nil {
			return templErr
		}
		templVar3 := `
        .customClass {
          border: 1px solid black;
        }
      `
		_, templErr = templBuffer.WriteString(templVar3)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</style><script type=\"text/javascript\">")
		if templErr != nil {
			return templErr
		}
		templVar4 := `
        $("div").marquee();
        function test() {
              window.open("https://example.com")
        }
      `
		_, templErr = templBuffer.WriteString(templVar4)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</script><h1>")
		if templErr != nil {
			return templErr
		}
		templVar5 := `Hello`
		_, templErr = templBuffer.WriteString(templVar5)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</h1></body></html>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

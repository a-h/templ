// Code generated by templ@(devel) DO NOT EDIT.

package testtemplelement

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"

func layout(children templ.Component) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		ctx, _ = templ.RenderedCSSClassesFromContext(ctx)
		ctx, _ = templ.RenderedScriptsFromContext(ctx)
		// Element (standard)
		_, err = io.WriteString(w, "<p>")
		if err != nil {
			return err
		}
		// Text
		var_1 := `header`
		_, err = io.WriteString(w, var_1)
		if err != nil {
			return err
		}
		_, err = io.WriteString(w, "</p>")
		if err != nil {
			return err
		}
		// TemplElement
		err = children.Render(ctx, w)
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = io.WriteString(w, "<p>")
		if err != nil {
			return err
		}
		// Text
		var_2 := `footer`
		_, err = io.WriteString(w, var_2)
		if err != nil {
			return err
		}
		_, err = io.WriteString(w, "</p>")
		if err != nil {
			return err
		}
		return err
	})
}

func template() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		ctx, _ = templ.RenderedCSSClassesFromContext(ctx)
		ctx, _ = templ.RenderedScriptsFromContext(ctx)
		// TemplElement
		var_3 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			// Text
			var_4 := `some text`
			_, err = io.WriteString(w, var_4)
			if err != nil {
				return err
			}
			return err
		})
		err = layout(var_3).Render(ctx, w)
		if err != nil {
			return err
		}
		return err
	})
}


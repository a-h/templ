// Code generated by templ@(devel) DO NOT EDIT.

package testtemplelement

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "fmt"

func wrapper(index int) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar1 := templ.GetChildren(templCtx)
		if templVar1 == nil {
			templVar1 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<div id=\"")
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString(templ.EscapeString(fmt.Sprint(index)))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("\">")
		if templErr != nil {
			return templErr
		}
		templErr = templVar1.Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</div>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func template() templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar2 := templ.GetChildren(templCtx)
		if templVar2 == nil {
			templVar2 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		templVar3 := templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
			templBuffer, templIsBuffer := templW.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			templVar4 := `child1`
			_, templErr = templBuffer.WriteString(templVar4)
			if templErr != nil {
				return templErr
			}
			_, templErr = templBuffer.WriteString(" ")
			if templErr != nil {
				return templErr
			}
			templVar5 := templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
				templBuffer, templIsBuffer := templW.(*bytes.Buffer)
				if !templIsBuffer {
					templBuffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templBuffer)
				}
				templVar6 := `child2`
				_, templErr = templBuffer.WriteString(templVar6)
				if templErr != nil {
					return templErr
				}
				_, templErr = templBuffer.WriteString(" ")
				if templErr != nil {
					return templErr
				}
				templVar7 := templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
					templBuffer, templIsBuffer := templW.(*bytes.Buffer)
					if !templIsBuffer {
						templBuffer = templ.GetBuffer()
						defer templ.ReleaseBuffer(templBuffer)
					}
					templVar8 := `child3`
					_, templErr = templBuffer.WriteString(templVar8)
					if templErr != nil {
						return templErr
					}
					_, templErr = templBuffer.WriteString(" ")
					if templErr != nil {
						return templErr
					}
					templErr = wrapper(4).Render(templCtx, templBuffer)
					if templErr != nil {
						return templErr
					}
					if !templIsBuffer {
						_, templErr = io.Copy(templW, templBuffer)
					}
					return templErr
				})
				templErr = wrapper(3).Render(templ.WithChildren(templCtx, templVar7), templBuffer)
				if templErr != nil {
					return templErr
				}
				if !templIsBuffer {
					_, templErr = io.Copy(templW, templBuffer)
				}
				return templErr
			})
			templErr = wrapper(2).Render(templ.WithChildren(templCtx, templVar5), templBuffer)
			if templErr != nil {
				return templErr
			}
			if !templIsBuffer {
				_, templErr = io.Copy(templW, templBuffer)
			}
			return templErr
		})
		templErr = wrapper(1).Render(templ.WithChildren(templCtx, templVar3), templBuffer)
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

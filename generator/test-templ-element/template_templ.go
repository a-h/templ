// Code generated by templ@(devel) DO NOT EDIT.

package testtemplelement

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"

func layout() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		ctx, _ = templ.RenderedCSSClassesFromContext(ctx)
		ctx, _ = templ.RenderedScriptsFromContext(ctx)
		var_1 := ctx
		ctx = templ.ClearChildren(var_1)
		// Element (standard)
		_, err = io.WriteString(w, "<p>")
		if err != nil {
			return err
		}
		// Text
		var_2 := `header`
		_, err = io.WriteString(w, var_2)
		if err != nil {
			return err
		}
		_, err = io.WriteString(w, "</p>")
		if err != nil {
			return err
		}
		// Children
		err = templ.GetChildren(var_1).Render(ctx, w)
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = io.WriteString(w, "<p>")
		if err != nil {
			return err
		}
		// Text
		var_3 := `footer`
		_, err = io.WriteString(w, var_3)
		if err != nil {
			return err
		}
		_, err = io.WriteString(w, "</p>")
		if err != nil {
			return err
		}
		return err
	})
}

func component() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		ctx, _ = templ.RenderedCSSClassesFromContext(ctx)
		ctx, _ = templ.RenderedScriptsFromContext(ctx)
		var_4 := ctx
		ctx = templ.ClearChildren(var_4)
		// Element (standard)
		_, err = io.WriteString(w, "<p>")
		if err != nil {
			return err
		}
		// Text
		var_5 := `some component`
		_, err = io.WriteString(w, var_5)
		if err != nil {
			return err
		}
		_, err = io.WriteString(w, "</p>")
		if err != nil {
			return err
		}
		return err
	})
}

func template() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		ctx, _ = templ.RenderedCSSClassesFromContext(ctx)
		ctx, _ = templ.RenderedScriptsFromContext(ctx)
		var_6 := ctx
		ctx = templ.ClearChildren(var_6)
		// TemplElement
		var_7 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			// Text
			var_8 := `some text`
			_, err = io.WriteString(w, var_8)
			if err != nil {
				return err
			}
			// Whitespace (normalised)
			_, err = io.WriteString(w, ` `)
			if err != nil {
				return err
			}
			// TemplElement
			err = component().Render(ctx, w)
			if err != nil {
				return err
			}
			return err
		})
		err = layout().Render(templ.WithChildren(ctx, var_7), w)
		if err != nil {
			return err
		}
		return err
	})
}


// Code generated by templ@(devel) DO NOT EDIT.

package testimport

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func listItem() templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar1 := templ.GetChildren(templCtx)
		if templVar1 == nil {
			templVar1 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<li>")
		if templErr != nil {
			return templErr
		}
		templErr = templVar1.Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</li>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func list() templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar2 := templ.GetChildren(templCtx)
		if templVar2 == nil {
			templVar2 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<ul>")
		if templErr != nil {
			return templErr
		}
		templErr = templVar2.Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</ul>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func main() templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar3 := templ.GetChildren(templCtx)
		if templVar3 == nil {
			templVar3 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		templVar4 := templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
			templBuffer, templIsBuffer := templW.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			templVar5 := templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
				templBuffer, templIsBuffer := templW.(*bytes.Buffer)
				if !templIsBuffer {
					templBuffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templBuffer)
				}
				_, templErr = templBuffer.WriteString("<u>")
				if templErr != nil {
					return templErr
				}
				templVar6 := `Item 1`
				_, templErr = templBuffer.WriteString(templVar6)
				if templErr != nil {
					return templErr
				}
				_, templErr = templBuffer.WriteString("</u>")
				if templErr != nil {
					return templErr
				}
				if !templIsBuffer {
					_, templErr = io.Copy(templW, templBuffer)
				}
				return templErr
			})
			templErr = listItem().Render(templ.WithChildren(templCtx, templVar5), templBuffer)
			if templErr != nil {
				return templErr
			}
			_, templErr = templBuffer.WriteString(" ")
			if templErr != nil {
				return templErr
			}
			templVar7 := templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
				templBuffer, templIsBuffer := templW.(*bytes.Buffer)
				if !templIsBuffer {
					templBuffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templBuffer)
				}
				_, templErr = templBuffer.WriteString("<u>")
				if templErr != nil {
					return templErr
				}
				templVar8 := `Item 2`
				_, templErr = templBuffer.WriteString(templVar8)
				if templErr != nil {
					return templErr
				}
				_, templErr = templBuffer.WriteString("</u>")
				if templErr != nil {
					return templErr
				}
				if !templIsBuffer {
					_, templErr = io.Copy(templW, templBuffer)
				}
				return templErr
			})
			templErr = listItem().Render(templ.WithChildren(templCtx, templVar7), templBuffer)
			if templErr != nil {
				return templErr
			}
			_, templErr = templBuffer.WriteString(" ")
			if templErr != nil {
				return templErr
			}
			templVar9 := templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
				templBuffer, templIsBuffer := templW.(*bytes.Buffer)
				if !templIsBuffer {
					templBuffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templBuffer)
				}
				_, templErr = templBuffer.WriteString("<u>")
				if templErr != nil {
					return templErr
				}
				templVar10 := `Item 3`
				_, templErr = templBuffer.WriteString(templVar10)
				if templErr != nil {
					return templErr
				}
				_, templErr = templBuffer.WriteString("</u>")
				if templErr != nil {
					return templErr
				}
				if !templIsBuffer {
					_, templErr = io.Copy(templW, templBuffer)
				}
				return templErr
			})
			templErr = listItem().Render(templ.WithChildren(templCtx, templVar9), templBuffer)
			if templErr != nil {
				return templErr
			}
			if !templIsBuffer {
				_, templErr = io.Copy(templW, templBuffer)
			}
			return templErr
		})
		templErr = list().Render(templ.WithChildren(templCtx, templVar4), templBuffer)
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

// Code generated by templ@(devel) DO NOT EDIT.

package testcomment

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func render(content string) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar1 := templ.GetChildren(templCtx)
		if templVar1 == nil {
			templVar1 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<!--")
		if templErr != nil {
			return templErr
		}
		templVar2 := ` simple html comment `
		_, templErr = templBuffer.WriteString(templVar2)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("-->")
		if templErr != nil {
			return templErr
		}
		templErr = paragraph(content).Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("<!--")
		if templErr != nil {
			return templErr
		}
		templVar3 := `
		multiline
		comment
	`
		_, templErr = templBuffer.WriteString(templVar3)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("-->")
		if templErr != nil {
			return templErr
		}
		templErr = paragraph("second paragraph").Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("<!--")
		if templErr != nil {
			return templErr
		}
		templVar4 := `
		@paragraph("commented out composed element")
	`
		_, templErr = templBuffer.WriteString(templVar4)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("-->")
		if templErr != nil {
			return templErr
		}
		templErr = paragraph("third paragraph").Render(templCtx, templBuffer)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("<!--")
		if templErr != nil {
			return templErr
		}
		templVar5 := ` commented out string expression: { content } `
		_, templErr = templBuffer.WriteString(templVar5)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("--><span>")
		if templErr != nil {
			return templErr
		}
		var templVar6 string = content
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar6))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</span><!--")
		if templErr != nil {
			return templErr
		}
		templVar7 := ` <div>comment with html</div> `
		_, templErr = templBuffer.WriteString(templVar7)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("-->")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

func paragraph(content string) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar8 := templ.GetChildren(templCtx)
		if templVar8 == nil {
			templVar8 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<p>")
		if templErr != nil {
			return templErr
		}
		var templVar9 string = content
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar9))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</p>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

// Code generated by templ@(devel) DO NOT EDIT.

package testtextwhitespace

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func WhitespaceIsAddedWithinTemplStatements() templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar1 := templ.GetChildren(templCtx)
		if templVar1 == nil {
			templVar1 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<p>")
		if templErr != nil {
			return templErr
		}
		templVar2 := `This is some text.`
		_, templErr = templBuffer.WriteString(templVar2)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString(" ")
		if templErr != nil {
			return templErr
		}
		if true {
			templVar3 := `So is this.`
			_, templErr = templBuffer.WriteString(templVar3)
			if templErr != nil {
				return templErr
			}
		}
		_, templErr = templBuffer.WriteString("</p>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

const WhitespaceIsAddedWithinTemplStatementsExpected = `<p>This is some text. So is this.</p>`

func InlineElementsAreNotPadded() templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar4 := templ.GetChildren(templCtx)
		if templVar4 == nil {
			templVar4 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<p>")
		if templErr != nil {
			return templErr
		}
		templVar5 := `Inline text `
		_, templErr = templBuffer.WriteString(templVar5)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("<b>")
		if templErr != nil {
			return templErr
		}
		templVar6 := `is spaced properly`
		_, templErr = templBuffer.WriteString(templVar6)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</b> ")
		if templErr != nil {
			return templErr
		}
		templVar7 := `without adding extra spaces.`
		_, templErr = templBuffer.WriteString(templVar7)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</p>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

const InlineElementsAreNotPaddedExpected = `<p>Inline text <b>is spaced properly</b> without adding extra spaces.</p>`

func WhiteSpaceInHTMLIsNormalised() templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar8 := templ.GetChildren(templCtx)
		if templVar8 == nil {
			templVar8 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<p>")
		if templErr != nil {
			return templErr
		}
		templVar9 := `newlines and other whitespace are stripped`
		_, templErr = templBuffer.WriteString(templVar9)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString(" ")
		if templErr != nil {
			return templErr
		}
		templVar10 := `but it is normalised`
		_, templErr = templBuffer.WriteString(templVar10)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString(" ")
		if templErr != nil {
			return templErr
		}
		templVar11 := `like HTML.`
		_, templErr = templBuffer.WriteString(templVar11)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</p>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

const WhiteSpaceInHTMLIsNormalisedExpected = `<p>newlines and other whitespace are stripped but it is normalised like HTML.</p>`

func WhiteSpaceAroundValues() templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar12 := templ.GetChildren(templCtx)
		if templVar12 == nil {
			templVar12 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<p>")
		if templErr != nil {
			return templErr
		}
		templVar13 := `templ allows `
		_, templErr = templBuffer.WriteString(templVar13)
		if templErr != nil {
			return templErr
		}
		var templVar14 string = "strings"
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar14))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString(" ")
		if templErr != nil {
			return templErr
		}
		templVar15 := `to be included in sentences.`
		_, templErr = templBuffer.WriteString(templVar15)
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</p>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

const WhiteSpaceAroundValuesExpected = `<p>templ allows strings to be included in sentences.</p>`

const WhiteSpaceAroundTemplatedValuesExpected = `<div>templ allows whitespace around templated values.</div>`

func WhiteSpaceAroundTemplatedValues(prefix, statement string) templ.Component {
	return templ.ComponentFunc(func(templCtx context.Context, templW io.Writer) (templErr error) {
		templBuffer, templIsBuffer := templW.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		templCtx = templ.InitializeContext(templCtx)
		templVar16 := templ.GetChildren(templCtx)
		if templVar16 == nil {
			templVar16 = templ.NopComponent
		}
		templCtx = templ.ClearChildren(templCtx)
		_, templErr = templBuffer.WriteString("<div>")
		if templErr != nil {
			return templErr
		}
		var templVar17 string = prefix
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar17))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString(" ")
		if templErr != nil {
			return templErr
		}
		var templVar18 string = statement
		_, templErr = templBuffer.WriteString(templ.EscapeString(templVar18))
		if templErr != nil {
			return templErr
		}
		_, templErr = templBuffer.WriteString("</div>")
		if templErr != nil {
			return templErr
		}
		if !templIsBuffer {
			_, templErr = templBuffer.WriteTo(templW)
		}
		return templErr
	})
}

package templ

import (
	"context"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"html"
	"io"
	"net/http"
	"sort"
	"strings"

	"github.com/a-h/templ/safehtml"
)

// Classes for CSS.
func Classes(classes ...CSSClass) CSSClasses {
	return CSSClasses(classes)
}

// CSSClasses is a slice of CSS classes.
type CSSClasses []CSSClass

// String returns the names of all CSS classes.
func (classes CSSClasses) String() string {
	var sb strings.Builder
	for i := 0; i < len(classes); i++ {
		c := classes[i]
		sb.WriteString(c.ClassName())
		if i < len(classes)-1 {
			sb.WriteRune(' ')
		}
	}
	return sb.String()
}

// Class returns a static CSS class name.
func Class(name string) CSSClass {
	return ConstantCSSClass(name)
}

// CSSClass provides a class name.
type CSSClass interface {
	ClassName() string
}

// ConstantCSSClass is a string constant of a CSS class name.
type ConstantCSSClass string

// ClassName of the CSS class.
func (css ConstantCSSClass) ClassName() string {
	return string(css)
}

// ComponentCSSClass is a templ.CSS
type ComponentCSSClass struct {
	// ID of the class, will be autogenerated.
	ID string
	// Definition of the CSS.
	Class SafeCSS
}

// ClassName of the CSS class.
func (css ComponentCSSClass) ClassName() string {
	return css.ID
}

// CSSID calculates an ID.
func CSSID(name string, css string) string {
	h := sha256.New()
	h.Write([]byte(css))
	hp := hex.EncodeToString(h.Sum(nil))[0:4]
	return fmt.Sprintf("%s_%s", name, hp)
}

type contextKey string

var (
	contextKeyRenderedClasses = contextKey("renderedClasses")
)

// StringSet is a set of strings.
type StringSet struct {
	ss map[string]struct{}
}

// Add string s to the set.
func (rc *StringSet) Add(s string) {
	rc.ss[s] = struct{}{}
}

// Contains returns true if s is within the set.
func (rc *StringSet) Contains(s string) bool {
	_, ok := rc.ss[s]
	return ok
}

// All returns a slice of all items in the set.
func (rc *StringSet) All() (values []string) {
	values = make([]string, len(rc.ss))
	var index int
	for k := range rc.ss {
		values[index] = k
		index++
	}
	sort.Strings(values)
	return values
}

// RenderedCSSClassesFromContext returns a set of the CSS classes that have already been
// rendered to the response.
func RenderedCSSClassesFromContext(ctx context.Context) (context.Context, *StringSet) {
	if classes, ok := ctx.Value(contextKeyRenderedClasses).(*StringSet); ok {
		return ctx, classes
	}
	rc := &StringSet{ss: make(map[string]struct{})}
	ctx = context.WithValue(ctx, contextKeyRenderedClasses, rc)
	return ctx, rc
}

// NewCSSMiddleware creates HTTP middleware that renders a global stylesheet of ComponentCSSClass
// CSS if the request path matches, or updates the HTTP context to ensure that any handlers that
// use templ.Components skip rendering <style> elements for classes that are included in the global
// stylesheet. By default, the stylesheet path is /styles/templ.css
func NewCSSMiddleware(next http.Handler, classes ...ComponentCSSClass) CSSMiddleware {
	return CSSMiddleware{
		Path:       "/styles/templ.css",
		CSSHandler: NewCSSHandler(classes...),
		Next:       next,
	}
}

// CSSMiddleware renders a global stylesheet.
type CSSMiddleware struct {
	Path       string
	CSSHandler CSSHandler
	Next       http.Handler
}

func (cssm CSSMiddleware) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path == cssm.Path {
		cssm.CSSHandler.ServeHTTP(w, r)
		return
	}
	// Add registered classes to the context.
	ctx, classes := RenderedCSSClassesFromContext(r.Context())
	for _, c := range cssm.CSSHandler.Classes {
		classes.Add(c.ClassName())
	}
	// Serve the request. Templ components will use the updated context
	// to know to skip rendering <style> elements for any component CSS
	// classes that have been included in the global stylesheet.
	cssm.Next.ServeHTTP(w, r.WithContext(ctx))
}

// NewCSSHandler creates a handler that serves a stylesheet containing the CSS of the
// classes passed in. This is used by the CSSMiddleware to provide global stylesheets
// for templ components.
func NewCSSHandler(classes ...ComponentCSSClass) CSSHandler {
	return CSSHandler{
		Classes: classes,
	}
}

// CSSHandler is a HTTP handler that serves CSS.
type CSSHandler struct {
	Classes []ComponentCSSClass
}

func (cssh CSSHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "text/css")
	for _, c := range cssh.Classes {
		w.Write([]byte(c.Class))
	}
}

// Render CSS renders a <style> element with CSS content, if the styles have not already been rendered.
func RenderCSS(ctx context.Context, w io.Writer, classes []CSSClass) (err error) {
	ctx, rc := RenderedCSSClassesFromContext(ctx)
	var sb strings.Builder
	for _, c := range classes {
		if ccc, ok := c.(ComponentCSSClass); ok {
			if !rc.Contains(ccc.ClassName()) {
				sb.WriteString(string(ccc.Class))
				rc.Add(ccc.ClassName())
			}
		}
	}
	if sb.Len() > 0 {
		if _, err = io.WriteString(w, `<style type="text/css">`); err != nil {
			return err
		}
		if _, err = io.WriteString(w, sb.String()); err != nil {
			return err
		}
		if _, err = io.WriteString(w, `</style>`); err != nil {
			return err
		}
	}
	return nil
}

// SafeCSS is CSS that has been sanitized.
type SafeCSS string

// SanitizeCSS sanitizes CSS properties to ensure that they are safe.
func SanitizeCSS(property, value string) SafeCSS {
	p, v := safehtml.SanitizeCSS(property, value)
	return SafeCSS(p + ":" + v + ";")
}

// FailedSanitizationURL is returned if a URL fails sanitization checks.
const FailedSanitizationURL = SafeURL("about:invalid#TemplFailedSanitizationURL")

// URL sanitizes the input string s and returns a SafeURL.
func URL(s string) SafeURL {
	if i := strings.IndexRune(s, ':'); i >= 0 && !strings.ContainsRune(s[:i], '/') {
		protocol := s[:i]
		if !strings.EqualFold(protocol, "http") && !strings.EqualFold(protocol, "https") && !strings.EqualFold(protocol, "mailto") {
			return FailedSanitizationURL
		}
	}
	return SafeURL(s)
}

// SafeURL is a URL that has been sanitized.
type SafeURL string

// Component is the interface that all templates implement.
type Component interface {
	// Render the template.
	Render(ctx context.Context, w io.Writer) error
}

// ComponentFunc converts a function that matches the Component interface's
// Render method into a Component.
type ComponentFunc func(ctx context.Context, w io.Writer) error

// Render the template.
func (cf ComponentFunc) Render(ctx context.Context, w io.Writer) error {
	return cf(ctx, w)
}

// EscapeString escapes HTML text within templates.
func EscapeString(s string) string {
	return html.EscapeString(s)
}
